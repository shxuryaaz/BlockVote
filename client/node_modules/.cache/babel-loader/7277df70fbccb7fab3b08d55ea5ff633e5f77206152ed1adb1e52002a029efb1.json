{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pbkdf2 = pbkdf2;\nexports.pbkdf2Async = pbkdf2Async;\n/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\nconst hmac_ts_1 = require(\"./hmac.js\");\n// prettier-ignore\nconst utils_ts_1 = require(\"./utils.js\");\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n  (0, utils_ts_1.ahash)(hash);\n  const opts = (0, utils_ts_1.checkOpts)({\n    dkLen: 32,\n    asyncTick: 10\n  }, _opts);\n  const {\n    c,\n    dkLen,\n    asyncTick\n  } = opts;\n  (0, utils_ts_1.anumber)(c);\n  (0, utils_ts_1.anumber)(dkLen);\n  (0, utils_ts_1.anumber)(asyncTick);\n  if (c < 1) throw new Error('iterations (c) should be >= 1');\n  const password = (0, utils_ts_1.kdfInputToBytes)(_password);\n  const salt = (0, utils_ts_1.kdfInputToBytes)(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac_ts_1.hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return {\n    c,\n    dkLen,\n    asyncTick,\n    DK,\n    PRF,\n    PRFSalt\n  };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  (0, utils_ts_1.clean)(u);\n  return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: Math.pow(2, 18) });\n */\nfunction pbkdf2(hash, password, salt, opts) {\n  const {\n    c,\n    dkLen,\n    DK,\n    PRF,\n    PRFSalt\n  } = pbkdf2Init(hash, password, salt, opts);\n  let prfW; // Working copy\n  const arr = new Uint8Array(4);\n  const view = (0, utils_ts_1.createView)(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nasync function pbkdf2Async(hash, password, salt, opts) {\n  const {\n    c,\n    dkLen,\n    asyncTick,\n    DK,\n    PRF,\n    PRFSalt\n  } = pbkdf2Init(hash, password, salt, opts);\n  let prfW; // Working copy\n  const arr = new Uint8Array(4);\n  const view = (0, utils_ts_1.createView)(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await (0, utils_ts_1.asyncLoop)(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}","map":{"version":3,"names":["exports","pbkdf2","pbkdf2Async","hmac_ts_1","require","utils_ts_1","pbkdf2Init","hash","_password","_salt","_opts","ahash","opts","checkOpts","dkLen","asyncTick","c","anumber","Error","password","kdfInputToBytes","salt","DK","Uint8Array","PRF","hmac","create","PRFSalt","_cloneInto","update","pbkdf2Output","prfW","u","destroy","clean","arr","view","createView","outputLen","ti","pos","Ti","subarray","setInt32","digestInto","set","length","ui","i","asyncLoop"],"sources":["C:\\Users\\Admin\\Desktop\\voting-dapp\\client\\node_modules\\@noble\\hashes\\src\\pbkdf2.ts"],"sourcesContent":["/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\nimport { hmac } from './hmac.ts';\n// prettier-ignore\nimport {\n  ahash, anumber,\n  asyncLoop, checkOpts, clean, createView, Hash, kdfInputToBytes,\n  type CHash,\n  type KDFInput\n} from './utils.ts';\n\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: KDFInput, _salt: KDFInput, _opts: Pbkdf2Opt) {\n  ahash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  anumber(c);\n  anumber(dkLen);\n  anumber(asyncTick);\n  if (c < 1) throw new Error('iterations (c) should be >= 1');\n  const password = kdfInputToBytes(_password);\n  const salt = kdfInputToBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  clean(u);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: Math.pow(2, 18) });\n */\nexport function pbkdf2(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Uint8Array {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nexport async function pbkdf2Async(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Promise<Uint8Array> {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}