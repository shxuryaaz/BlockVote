{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sha512_224 = exports.sha512_256 = exports.sha384 = exports.sha512 = exports.sha224 = exports.sha256 = exports.SHA512_256 = exports.SHA512_224 = exports.SHA384 = exports.SHA512 = exports.SHA224 = exports.SHA256 = void 0;\n/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nconst _md_ts_1 = require(\"./_md.js\");\nconst u64 = require(\"./_u64.js\");\nconst utils_ts_1 = require(\"./utils.js\");\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */Uint32Array.from([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */new Uint32Array(64);\nclass SHA256 extends _md_ts_1.HashMD {\n  constructor(outputLen = 32) {\n    super(64, outputLen, 8, false);\n    // We cannot use array here since array allows indexing by variable\n    // which means optimizer/compiler cannot use registers.\n    this.A = _md_ts_1.SHA256_IV[0] | 0;\n    this.B = _md_ts_1.SHA256_IV[1] | 0;\n    this.C = _md_ts_1.SHA256_IV[2] | 0;\n    this.D = _md_ts_1.SHA256_IV[3] | 0;\n    this.E = _md_ts_1.SHA256_IV[4] | 0;\n    this.F = _md_ts_1.SHA256_IV[5] | 0;\n    this.G = _md_ts_1.SHA256_IV[6] | 0;\n    this.H = _md_ts_1.SHA256_IV[7] | 0;\n  }\n  get() {\n    const {\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  set(A, B, C, D, E, F, G, H) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  process(view, offset) {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = (0, utils_ts_1.rotr)(W15, 7) ^ (0, utils_ts_1.rotr)(W15, 18) ^ W15 >>> 3;\n      const s1 = (0, utils_ts_1.rotr)(W2, 17) ^ (0, utils_ts_1.rotr)(W2, 19) ^ W2 >>> 10;\n      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let {\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = (0, utils_ts_1.rotr)(E, 6) ^ (0, utils_ts_1.rotr)(E, 11) ^ (0, utils_ts_1.rotr)(E, 25);\n      const T1 = H + sigma1 + (0, _md_ts_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n      const sigma0 = (0, utils_ts_1.rotr)(A, 2) ^ (0, utils_ts_1.rotr)(A, 13) ^ (0, utils_ts_1.rotr)(A, 22);\n      const T2 = sigma0 + (0, _md_ts_1.Maj)(A, B, C) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = D + T1 | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = T1 + T2 | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = A + this.A | 0;\n    B = B + this.B | 0;\n    C = C + this.C | 0;\n    D = D + this.D | 0;\n    E = E + this.E | 0;\n    F = F + this.F | 0;\n    G = G + this.G | 0;\n    H = H + this.H | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  roundClean() {\n    (0, utils_ts_1.clean)(SHA256_W);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    (0, utils_ts_1.clean)(this.buffer);\n  }\n}\nexports.SHA256 = SHA256;\nclass SHA224 extends SHA256 {\n  constructor() {\n    super(28);\n    this.A = _md_ts_1.SHA224_IV[0] | 0;\n    this.B = _md_ts_1.SHA224_IV[1] | 0;\n    this.C = _md_ts_1.SHA224_IV[2] | 0;\n    this.D = _md_ts_1.SHA224_IV[3] | 0;\n    this.E = _md_ts_1.SHA224_IV[4] | 0;\n    this.F = _md_ts_1.SHA224_IV[5] | 0;\n    this.G = _md_ts_1.SHA224_IV[6] | 0;\n    this.H = _md_ts_1.SHA224_IV[7] | 0;\n  }\n}\nexports.SHA224 = SHA224;\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */(() => u64.split(['0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc', '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118', '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2', '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694', '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65', '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5', '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4', '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70', '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df', '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b', '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30', '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8', '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8', '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3', '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec', '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b', '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178', '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b', '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c', '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */(() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */(() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */new Uint32Array(80);\nclass SHA512 extends _md_ts_1.HashMD {\n  constructor(outputLen = 64) {\n    super(128, outputLen, 16, false);\n    // We cannot use array here since array allows indexing by variable\n    // which means optimizer/compiler cannot use registers.\n    // h -- high 32 bits, l -- low 32 bits\n    this.Ah = _md_ts_1.SHA512_IV[0] | 0;\n    this.Al = _md_ts_1.SHA512_IV[1] | 0;\n    this.Bh = _md_ts_1.SHA512_IV[2] | 0;\n    this.Bl = _md_ts_1.SHA512_IV[3] | 0;\n    this.Ch = _md_ts_1.SHA512_IV[4] | 0;\n    this.Cl = _md_ts_1.SHA512_IV[5] | 0;\n    this.Dh = _md_ts_1.SHA512_IV[6] | 0;\n    this.Dl = _md_ts_1.SHA512_IV[7] | 0;\n    this.Eh = _md_ts_1.SHA512_IV[8] | 0;\n    this.El = _md_ts_1.SHA512_IV[9] | 0;\n    this.Fh = _md_ts_1.SHA512_IV[10] | 0;\n    this.Fl = _md_ts_1.SHA512_IV[11] | 0;\n    this.Gh = _md_ts_1.SHA512_IV[12] | 0;\n    this.Gl = _md_ts_1.SHA512_IV[13] | 0;\n    this.Hh = _md_ts_1.SHA512_IV[14] | 0;\n    this.Hl = _md_ts_1.SHA512_IV[15] | 0;\n  }\n  // prettier-ignore\n  get() {\n    const {\n      Ah,\n      Al,\n      Bh,\n      Bl,\n      Ch,\n      Cl,\n      Dh,\n      Dl,\n      Eh,\n      El,\n      Fh,\n      Fl,\n      Gh,\n      Gl,\n      Hh,\n      Hl\n    } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  process(view, offset) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32(offset += 4);\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let {\n      Ah,\n      Al,\n      Bh,\n      Bl,\n      Ch,\n      Cl,\n      Dh,\n      Dl,\n      Eh,\n      El,\n      Fh,\n      Fl,\n      Gh,\n      Gl,\n      Hh,\n      Hl\n    } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = Eh & Fh ^ ~Eh & Gh;\n      const CHIl = El & Fl ^ ~El & Gl;\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({\n        h: Eh,\n        l: El\n      } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({\n      h: Ah,\n      l: Al\n    } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({\n      h: Bh,\n      l: Bl\n    } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({\n      h: Ch,\n      l: Cl\n    } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({\n      h: Dh,\n      l: Dl\n    } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({\n      h: Eh,\n      l: El\n    } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({\n      h: Fh,\n      l: Fl\n    } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({\n      h: Gh,\n      l: Gl\n    } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({\n      h: Hh,\n      l: Hl\n    } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  roundClean() {\n    (0, utils_ts_1.clean)(SHA512_W_H, SHA512_W_L);\n  }\n  destroy() {\n    (0, utils_ts_1.clean)(this.buffer);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\nexports.SHA512 = SHA512;\nclass SHA384 extends SHA512 {\n  constructor() {\n    super(48);\n    this.Ah = _md_ts_1.SHA384_IV[0] | 0;\n    this.Al = _md_ts_1.SHA384_IV[1] | 0;\n    this.Bh = _md_ts_1.SHA384_IV[2] | 0;\n    this.Bl = _md_ts_1.SHA384_IV[3] | 0;\n    this.Ch = _md_ts_1.SHA384_IV[4] | 0;\n    this.Cl = _md_ts_1.SHA384_IV[5] | 0;\n    this.Dh = _md_ts_1.SHA384_IV[6] | 0;\n    this.Dl = _md_ts_1.SHA384_IV[7] | 0;\n    this.Eh = _md_ts_1.SHA384_IV[8] | 0;\n    this.El = _md_ts_1.SHA384_IV[9] | 0;\n    this.Fh = _md_ts_1.SHA384_IV[10] | 0;\n    this.Fl = _md_ts_1.SHA384_IV[11] | 0;\n    this.Gh = _md_ts_1.SHA384_IV[12] | 0;\n    this.Gl = _md_ts_1.SHA384_IV[13] | 0;\n    this.Hh = _md_ts_1.SHA384_IV[14] | 0;\n    this.Hl = _md_ts_1.SHA384_IV[15] | 0;\n  }\n}\nexports.SHA384 = SHA384;\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */Uint32Array.from([0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf, 0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */Uint32Array.from([0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd, 0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2]);\nclass SHA512_224 extends SHA512 {\n  constructor() {\n    super(28);\n    this.Ah = T224_IV[0] | 0;\n    this.Al = T224_IV[1] | 0;\n    this.Bh = T224_IV[2] | 0;\n    this.Bl = T224_IV[3] | 0;\n    this.Ch = T224_IV[4] | 0;\n    this.Cl = T224_IV[5] | 0;\n    this.Dh = T224_IV[6] | 0;\n    this.Dl = T224_IV[7] | 0;\n    this.Eh = T224_IV[8] | 0;\n    this.El = T224_IV[9] | 0;\n    this.Fh = T224_IV[10] | 0;\n    this.Fl = T224_IV[11] | 0;\n    this.Gh = T224_IV[12] | 0;\n    this.Gl = T224_IV[13] | 0;\n    this.Hh = T224_IV[14] | 0;\n    this.Hl = T224_IV[15] | 0;\n  }\n}\nexports.SHA512_224 = SHA512_224;\nclass SHA512_256 extends SHA512 {\n  constructor() {\n    super(32);\n    this.Ah = T256_IV[0] | 0;\n    this.Al = T256_IV[1] | 0;\n    this.Bh = T256_IV[2] | 0;\n    this.Bl = T256_IV[3] | 0;\n    this.Ch = T256_IV[4] | 0;\n    this.Cl = T256_IV[5] | 0;\n    this.Dh = T256_IV[6] | 0;\n    this.Dl = T256_IV[7] | 0;\n    this.Eh = T256_IV[8] | 0;\n    this.El = T256_IV[9] | 0;\n    this.Fh = T256_IV[10] | 0;\n    this.Fl = T256_IV[11] | 0;\n    this.Gh = T256_IV[12] | 0;\n    this.Gl = T256_IV[13] | 0;\n    this.Hh = T256_IV[14] | 0;\n    this.Hl = T256_IV[15] | 0;\n  }\n}\nexports.SHA512_256 = SHA512_256;\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexports.sha256 = (0, utils_ts_1.createHasher)(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexports.sha224 = (0, utils_ts_1.createHasher)(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nexports.sha512 = (0, utils_ts_1.createHasher)(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexports.sha384 = (0, utils_ts_1.createHasher)(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexports.sha512_256 = (0, utils_ts_1.createHasher)(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexports.sha512_224 = (0, utils_ts_1.createHasher)(() => new SHA512_224());","map":{"version":3,"names":["_md_ts_1","require","u64","utils_ts_1","SHA256_K","Uint32Array","from","SHA256_W","SHA256","HashMD","constructor","outputLen","A","SHA256_IV","B","C","D","E","F","G","H","get","set","process","view","offset","i","getUint32","W15","W2","s0","rotr","s1","sigma1","T1","Chi","sigma0","T2","Maj","roundClean","clean","destroy","buffer","exports","SHA224","SHA224_IV","K512","split","map","n","BigInt","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Ah","SHA512_IV","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","rotrSH","shrSH","s0l","rotrSL","shrSL","W2h","W2l","s1h","rotrBH","s1l","rotrBL","SUMl","add4L","SUMh","add4H","sigma1h","sigma1l","CHIh","CHIl","T1ll","add5L","T1h","add5H","T1l","sigma0h","sigma0l","MAJh","MAJl","h","l","add","All","add3L","add3H","SHA384","SHA384_IV","T224_IV","T256_IV","SHA512_224","SHA512_256","sha256","createHasher","sha224","sha512","sha384","sha512_256","sha512_224"],"sources":["C:\\Users\\Admin\\Desktop\\voting-dapp\\client\\node_modules\\@noble\\hashes\\src\\sha2.ts"],"sourcesContent":["/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from './_md.ts';\nimport * as u64 from './_u64.ts';\nimport { type CHash, clean, createHasher, rotr } from './utils.ts';\n\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor(outputLen: number = 32) {\n    super(64, outputLen, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    clean(SHA256_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\nexport class SHA224 extends SHA256 {\n  protected A: number = SHA224_IV[0] | 0;\n  protected B: number = SHA224_IV[1] | 0;\n  protected C: number = SHA224_IV[2] | 0;\n  protected D: number = SHA224_IV[3] | 0;\n  protected E: number = SHA224_IV[4] | 0;\n  protected F: number = SHA224_IV[5] | 0;\n  protected G: number = SHA224_IV[6] | 0;\n  protected H: number = SHA224_IV[7] | 0;\n  constructor() {\n    super(28);\n  }\n}\n\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\n\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = SHA512_IV[0] | 0;\n  protected Al: number = SHA512_IV[1] | 0;\n  protected Bh: number = SHA512_IV[2] | 0;\n  protected Bl: number = SHA512_IV[3] | 0;\n  protected Ch: number = SHA512_IV[4] | 0;\n  protected Cl: number = SHA512_IV[5] | 0;\n  protected Dh: number = SHA512_IV[6] | 0;\n  protected Dl: number = SHA512_IV[7] | 0;\n  protected Eh: number = SHA512_IV[8] | 0;\n  protected El: number = SHA512_IV[9] | 0;\n  protected Fh: number = SHA512_IV[10] | 0;\n  protected Fl: number = SHA512_IV[11] | 0;\n  protected Gh: number = SHA512_IV[12] | 0;\n  protected Gl: number = SHA512_IV[13] | 0;\n  protected Hh: number = SHA512_IV[14] | 0;\n  protected Hl: number = SHA512_IV[15] | 0;\n\n  constructor(outputLen: number = 64) {\n    super(128, outputLen, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ): void {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean(): void {\n    clean(SHA512_W_H, SHA512_W_L);\n  }\n  destroy(): void {\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nexport class SHA384 extends SHA512 {\n  protected Ah: number = SHA384_IV[0] | 0;\n  protected Al: number = SHA384_IV[1] | 0;\n  protected Bh: number = SHA384_IV[2] | 0;\n  protected Bl: number = SHA384_IV[3] | 0;\n  protected Ch: number = SHA384_IV[4] | 0;\n  protected Cl: number = SHA384_IV[5] | 0;\n  protected Dh: number = SHA384_IV[6] | 0;\n  protected Dl: number = SHA384_IV[7] | 0;\n  protected Eh: number = SHA384_IV[8] | 0;\n  protected El: number = SHA384_IV[9] | 0;\n  protected Fh: number = SHA384_IV[10] | 0;\n  protected Fl: number = SHA384_IV[11] | 0;\n  protected Gh: number = SHA384_IV[12] | 0;\n  protected Gl: number = SHA384_IV[13] | 0;\n  protected Hh: number = SHA384_IV[14] | 0;\n  protected Hl: number = SHA384_IV[15] | 0;\n\n  constructor() {\n    super(48);\n  }\n}\n\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n  0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n  0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n  0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n  0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\n\nexport class SHA512_224 extends SHA512 {\n  protected Ah: number = T224_IV[0] | 0;\n  protected Al: number = T224_IV[1] | 0;\n  protected Bh: number = T224_IV[2] | 0;\n  protected Bl: number = T224_IV[3] | 0;\n  protected Ch: number = T224_IV[4] | 0;\n  protected Cl: number = T224_IV[5] | 0;\n  protected Dh: number = T224_IV[6] | 0;\n  protected Dl: number = T224_IV[7] | 0;\n  protected Eh: number = T224_IV[8] | 0;\n  protected El: number = T224_IV[9] | 0;\n  protected Fh: number = T224_IV[10] | 0;\n  protected Fl: number = T224_IV[11] | 0;\n  protected Gh: number = T224_IV[12] | 0;\n  protected Gl: number = T224_IV[13] | 0;\n  protected Hh: number = T224_IV[14] | 0;\n  protected Hl: number = T224_IV[15] | 0;\n\n  constructor() {\n    super(28);\n  }\n}\n\nexport class SHA512_256 extends SHA512 {\n  protected Ah: number = T256_IV[0] | 0;\n  protected Al: number = T256_IV[1] | 0;\n  protected Bh: number = T256_IV[2] | 0;\n  protected Bl: number = T256_IV[3] | 0;\n  protected Ch: number = T256_IV[4] | 0;\n  protected Cl: number = T256_IV[5] | 0;\n  protected Dh: number = T256_IV[6] | 0;\n  protected Dl: number = T256_IV[7] | 0;\n  protected Eh: number = T256_IV[8] | 0;\n  protected El: number = T256_IV[9] | 0;\n  protected Fh: number = T256_IV[10] | 0;\n  protected Fl: number = T256_IV[11] | 0;\n  protected Gh: number = T256_IV[12] | 0;\n  protected Gl: number = T256_IV[13] | 0;\n  protected Hh: number = T256_IV[14] | 0;\n  protected Hl: number = T256_IV[15] | 0;\n\n  constructor() {\n    super(32);\n  }\n}\n\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256: CHash = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224: CHash = /* @__PURE__ */ createHasher(() => new SHA224());\n\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512: CHash = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384: CHash = /* @__PURE__ */ createHasher(() => new SHA384());\n\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256: CHash = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224: CHash = /* @__PURE__ */ createHasher(() => new SHA512_224());\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}